<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[潘柏信]]></title>
  <subtitle><![CDATA[勤劳的小码农]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="leopardpan.github.io//"/>
  <updated>2015-10-24T03:25:19.000Z</updated>
  <id>leopardpan.github.io//</id>
  
  <author>
    <name><![CDATA[潘柏信]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS 动态更新]]></title>
    <link href="leopardpan.github.io/2015/10/24/iOS%20%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0/"/>
    <id>leopardpan.github.io/2015/10/24/iOS 动态更新/</id>
    <published>2015-10-24T02:49:52.000Z</published>
    <updated>2015-10-24T03:25:19.000Z</updated>
    <content type="html"><![CDATA[<h3 id="App_动态更新"><code>App</code> 动态更新</h3><blockquote>
<ul>
<li>1、控件到 <code>window</code> 的层级关系:   </li>
<li>2、分析控件的详细路径:</li>
<li>3、动态修改控件:      </li>
<li>4、工具篇:</li>
</ul>
</blockquote>
<h4 id="视图的层级关系:">视图的层级关系:</h4><blockquote>
<p>每个 <code>App</code> , 至少有一个根 <code>Window</code> , 通常情况下我们只用一个 。<code>window</code> 有一个 <code>rootViewController</code> , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 <code>rootViewController</code> 里面的。</p>
</blockquote>
<p><img src="Dynamic-image1.jpeg" width="200px"/></p>
<blockquote>
<p>这个是最简单的层级关系</p>
</blockquote>
<p>如果在项目里有了这么一个路径 , 我们可以做什么呢？   </p>
<blockquote>
<ul>
<li>在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态</li>
<li>当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找</li>
<li>由服务器下发一些配置 , 使用 <code>Runtime</code> 去动态的修改已上线的项目</li>
</ul>
</blockquote>
<p>　下面将介绍如何使用代码来找出这些视图(控件)的路径</p>
<h4 id="分析控件的详细路径">分析控件的详细路径</h4><h5 id="1、找出根_Window_:">1、找出根 <code>Window</code> :</h5><blockquote>
<p> 每一个视图、控件 , 他们最终的根都是main函数返回的 <code>application</code> , 通过 <code>[UIApplication sharedApplication]</code> 可以得到 。 <code>application</code> 的 <code>windows</code> 属性是一个数组 , 这里面装的是这个应用的所有 <code>Window</code> , 我们通常用的是第一个也就是 <code>application.windows[0]</code>    </p>
</blockquote>
<h5 id="2、遍历视图_:">2、遍历视图 :</h5><blockquote>
<p>得到了 <code>window</code> 对象一切都好办了 。 然后拿到 <code>window</code> 的 <code>rootViewController</code> , 在获取 <code>rootViewController</code> 里面所有的 <code>childViewControllers</code> 和 <code>view</code> 里的 <code>subviews</code> , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 <code>runtime</code> 把它们的 <code>property</code> 、 <code>delegate</code> 都获取出来 。<br>结合 <code>Reveal</code> 或者 <code>Xcode</code> 自带的 <code>Captuer View Hiearachy</code> , 我们可以推测一下这两个的的实现原理了 :<br>1、根据应用得到根视图<br>2、递归获取里面的所有控件<br>3、按照他们的层级关系一层一层的画出来</p>
</blockquote>
<h4 id="动态修改控件">动态修改控件</h4><p>1、把上面获取到的所有控件的详细信息上传到服务器 。<br>2、根据业务需求由服务器给我们下发对应的配置列表 ,  以 <code>button</code> 为例 : 配置列表里必须要有 :    </p>
<blockquote>
<p>1)、<code>button</code> 的全路径 : 如 <code>UIWindow</code> -&gt; <code>UIWindow</code> -&gt; <code>UIView</code> -&gt; <code>UIView</code> -&gt; <code>UILayoutContainerView</code> -&gt; <code>UITabBar</code> -&gt; <code>UIView</code> —&gt; <code>UIButton</code><br>2)、<code>button</code> 的唯一标识 : 如 <code>tag</code> 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 <code>button</code> 同一层次的视图搞混 。<br>3)、 根据路径及唯一标识来匹配 <code>App</code> 里的控件 , 匹配和上面的查找原理是相通的。<br>4)、 匹配成功代表  <code>button</code> 确实存在 , 根据业务需求做后续操作 。<br>提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。</p>
</blockquote>
<p>3、修改 <code>button</code> 的状态。</p>
<blockquote>
<p>1)、 如某个按钮点了会 <code>Crash</code> 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 <code>button</code> 的 <code>enabled</code> 属性 。<br>2)、 如某业务暂时关闭 , 可以直接修改入口 <code>按钮</code> frame为0 , 前提是要自动布局已做好 。<br>3)、 如给购买 <code>按钮</code> 添加监听事件 <code>addTarget: action: forControlEvents:</code><br><code>target</code> 也可以通过上面 <code>遍历视图</code> 获取到 , <code>action</code> 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  </p>
</blockquote>
<p>4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : </p>
<blockquote>
<p>1、使用Runtime <code>Method Swizzing</code> ,  直接把修改控件的方法与 <code>didMoveToSuperview</code> 和 <code>didMoveToWindow</code> 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。<br>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在<code>viewDidLoad</code> 里面初始化控件 , 在 <code>viewWillAppear:</code> 里面动态修改 。<br>建议使用第一种适用范围更强 。</p>
</blockquote>
<p>　　上架后的 <code>应用</code> 可能会遇到的一些突发状况 , 未测出的<code>Crash</code>、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 <code>App Store</code> , 先不说 <code>App Store</code> 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。<br>　　首先上面讲的 <code>动态更新</code> 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 <a href="https://github.com/bang590/JSPatch">JSPatch</a> 、<a href="https://github.com/alibaba/wax">wax</a> , 下发脚本也是一个不错的选择 。</p>
<h4 id="工具篇:">工具篇:</h4><p>使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。<br>常用的UI调试的工具：</p>
<blockquote>
<ul>
<li>Captuer View Hiearachy</li>
<li>Reveal</li>
</ul>
</blockquote>
<p>Xcode自带的 <code>Captuer View Hiearachy</code> 实现步骤:  </p>
<blockquote>
<ul>
<li>1、打开Xcode , 运行项目 , 选择最顶部的 <code>Debug</code></li>
<li>2、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Show View Frames</code></li>
<li>3、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Captuer View Hiearachy</code></li>
</ul>
</blockquote>
<p>Xcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。</p>
<p>Reveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 <a href="http://support.revealapp.com/kb/getting-started/reveal">Reveal集成指南</a> 。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="App_动态更新"><code>App</code> 动态更新</h3><blockquote>
<ul>
<li>1、控件到 <code>window</code> 的层级关系:   </li>
<li>2、分析控件的详细路径:</li>
<li>3、动态修改控]]>
    </summary>
    
      <category term="iOS" scheme="leopardpan.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iPad Multitasking]]></title>
    <link href="leopardpan.github.io/2015/09/23/iPad-Multitasking/"/>
    <id>leopardpan.github.io/2015/09/23/iPad-Multitasking/</id>
    <published>2015-09-23T14:13:28.000Z</published>
    <updated>2015-09-23T14:40:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS9_iPad分屏多任务操作教程">iOS9 iPad分屏多任务操作教程</h2><h2 id="@iPad用户："><font color="cd6600">@iPad用户</font>：</h2><h2 id="SlideOver："><font color="cd6600">SlideOver</font>：</h2><p><font color="cd6600">简介</font>：iPad简单分屏功能，左侧原来的App占据屏幕的70%面积，右侧是30%，右侧App出来后进入活跃状态，左侧的App，所有基本活动将中断，但是并没有进入后台。</p>
<p><font color="cd6600">适用机型</font>：iPad air以及iPad mini2以后的所有机型</p>
<p><font color="cd6600">使用方法</font>：从屏幕右侧边缘轻扫，默认会打开上次打开过得App，顶部有一个Home键，往下拉可以展示所有可以展示的App。</p>
<h2 id="SplitView："><font color="cd6600">SplitView</font>：</h2><p><font color="cd6600">简介</font>：iPad分屏功能，允许两个应用在同一屏幕上显示，需要平板有足够强大的CPU和足够的内存来保证两款应用的流畅度。</p>
<p><font color="cd6600">适用机型</font>：iPad Air2，苹果官网（去年更新的）显示仅有iPad Air2支持这一功能</p>
<p><font color="cd6600">使用方法</font>：首先要经过SlideOver，如果你的是iPad Air2，你再轻扫后，两个App的中间的竖线有个白色半透明的条，点击这个条就会激活 SplitView，然后拖拽这个条就可以变换两个App的在屏幕里的大小了。</p>
<h2 id="Pictuer_in_Picture："><font color="cd6600">Pictuer in Picture</font>：</h2><p><font color="cd6600">简介</font>： 画中画（PiP）功能，让用户查看一个悬浮的App，只占据屏幕的一小部分面积。如果同时也在使用分屏功能的话，那么在同一屏幕可以同时使用三个App。</p>
<p><font color="cd6600">适用机型</font>：iPad air以及iPad mini2以后的机型</p>
<p><font color="cd6600">使用方法</font>：例如现在你在看视频，然后按下Home键，当前的视频就会悬浮在屏幕上。</p>
<h2 id="@Developer_User:"><font color="cd6600">@Developer User</font>:</h2><p>如果App是在Xcode7以前的环境开发的，要提供一个LaunchScreen.storyboard文件，不要使用之前的默认启动图片，Xcode6创建的项目自带的是LaunchScreen.Xib，Xcode7创建的项目会自带LaunchScreen.storyboard。</p>
<h2 id="SlideOver：-1"><font color="cd6600">SlideOver</font>：</h2><p>Demo在左侧：当右侧App出来的时候，左侧的将会被蒙上蒙版，正常活动将被终止，并没有进入后台</p>
<p><font color="cd6600">调用方法</font>：<br>1、applicationWillResignActive：（右侧App出来）<br>2、applicationDidBecomeActive：（右侧App消失）<br>Demo SDK在右侧：自己从右侧出现的时候，相当于把一个App重新打开和后台挂起<br>1.1、didFinishLaunchingWithOptions：（如果Demo没有启动过，Demo出现）<br>1.2、applicationWillEnterForeground：（如果Demo之前是挂在后台，Demo出现）<br>2、applicationDidBecomeActive：（Demo完全出现）<br>3、 applicationWillResignActive：（Demo自己消失）</p>
<p>4、 applicationDidEnterBackground：（Demo完全自己消失）</p>
<h2 id="SplitView：-1"><font color="cd6600">SplitView</font>：</h2><p>Demo 在左侧：<br>1、applicationWillResignActive：（右侧App出来，此时只相当于SlideOver效果）<br>2、applicationDidBecomeActive：（SplitView效果）</p>
<p>点击中间的小竖线激活SplitView<br>每次调整都会调用这两个方法<br>3、applicationWillResignActive：（调整两个App在屏幕中的位置，开始拖动）<br>4、applicationDidBecomeActive：（调整两个App在屏幕中的位置，拖动结束）</p>
<p>右边的App把Demo的完全挤出屏幕<br>5、applicationWillResignActive：（调整两个App在屏幕中的位置，开始拖动）<br>6、applicationDidEnterBackground：（Demo完全消失在屏幕）</p>
<p>Demo在右侧：<br>1.1、didFinishLaunchingWithOptions：（如果Demo没有启动过，Demo出现）<br>1.2、applicationWillEnterForeground：（如果Demo之前是挂在后台，Demo出现）<br>2、applicationDidBecomeActive：（Demo出现）</p>
<p>每次调整都会调用这两个方法<br>3、applicationWillResignActive：（调整两个App在屏幕中的位置，开始拖动）<br>4、applicationDidBecomeActive：（调整两个App在屏幕中的位置，拖动结束）</p>
<h2 id="Pictuer_in_Picture：-1"><font color="cd6600">Pictuer in Picture</font>：</h2><p>集成画中画这个功能，需要应用做PiP功能的支持，测试暂时放置</p>
<p>参考资料：<br><a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/AdoptingMultitaskingOniPad/QuickStartForSlideOverAndSplitView.html#//apple_ref/doc/uid/TP40015145-CH13-SW1">官网</a> 、 <a href="http://www.macrumors.com/2015/09/16/ios-9-split-screen-multitasking-ipad/">Split-Screen Multitasking for the iPad</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS9_iPad分屏多任务操作教程">iOS9 iPad分屏多任务操作教程</h2><h2 id="@iPad用户："><font color="cd6600">@iPad用户</font>：</h2><h2 id="SlideOver："><font colo]]>
    </summary>
    
      <category term="iOS9" scheme="leopardpan.github.io/tags/iOS9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS9变化笔记]]></title>
    <link href="leopardpan.github.io/2015/09/22/iOS9%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>leopardpan.github.io/2015/09/22/iOS9的变化/</id>
    <published>2015-09-22T13:06:23.000Z</published>
    <updated>2015-09-24T13:57:29.000Z</updated>
    <content type="html"><![CDATA[<p>这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。</p>
<h2 id="信息收集"><font color="cd6600">信息收集</font></h2><p>language：zh-Hans(iOS8)  ——&gt;  zh-Hans-CN(iOS9)<br>所有的进程列表都获取不到了<br>调用私有API<font color="008b00">FrontBoard.framework</font>可以获取到，但是有风险</p>
<h2 id="App_Transport_Security"><font color="cd6600">App Transport Security</font></h2><p>iOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：<br>    1、在Info.plist中添加NSAppTransportSecurity类型Dictionary，在NSAppTransportSecurity下添加NSAllowsArbitraryLoads，Boolean为YES。<br>    2、直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。</p>
<p>移除了discoveryd DNS解析服务<br>iPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。<br>mDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。<br>discoveryd：OS X Yosemite后苹果新出的一种进程。</p>
<h2 id="App_Thinning"><font color="cd6600">App Thinning</font></h2><p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>
<h3 id="App_Thinning主要有三个机制："><font color="cd6600">App Thinning主要有三个机制：</font></h3><pre><code>1、Slicing： 开发者把<span class="keyword">App</span>安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(<span class="keyword">App</span> variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。
2、<span class="keyword">On</span>-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据<span class="keyword">App</span>运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。
3、Bitcode：开启Bitcode编译后，可以使得开发者上传<span class="keyword">App</span>时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载<span class="keyword">App</span>之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。
</code></pre><p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：</p>
<pre><code class="bash">选择项目——&gt;点击Target——&gt;点击Build Setttings——&gt;搜索栏里搜bitcode——&gt;把Enable Bitcode对应的Yes改成No。
</code></pre>
<p>启用Bitcode编译机制，需要注意以下几点：</p>
<pre><code class="bash"><span class="number">1</span>、如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译
<span class="number">2</span>、开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。
<span class="number">3</span>、通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件
</code></pre>
<h2 id="后台定位"><font color="cd6600">后台定位</font></h2><p>iOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。<br>开启后台定位功能：locationManager.allowsBackgroundLocationUpdates = YES;<br>locationManager是CLLocationManager的对象，用来管理整个定位的。</p>
<pre><code class="bash">重点：配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item <span class="number">0</span>对应的Value设置为App registers <span class="keyword">for</span> location updates，这样就解决了iOS9后台定位出现蓝条的问题了。
</code></pre>
<h2 id="UI_Testing"><font color="cd6600">UI Testing</font></h2><p>Xcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。<br>可以参考Github上的Demo，步骤：</p>
<pre><code class="bash"><span class="number">1</span>、在DemoTests.m里创建一个<span class="built_in">test</span>开头的方法
<span class="number">2</span>、在<span class="built_in">set</span>Up()里启动应用XCUIApplication().launch()
<span class="number">3</span>、新建一个方法<span class="built_in">test</span>开头的，在里面获取应用<span class="built_in">let</span> app = XCUIApplication()
<span class="number">4</span>、的到<span class="built_in">let</span> app = XCUIApplication()，app.buttons[“View Detail”].tap()?。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。
</code></pre>
<h2 id="URL_scheme"><font color="cd6600">URL scheme</font></h2><p>在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。<br>配置info.plist，添加一个LSApplicationQueriesSchemes，Array类型的，然后在LSApplicationQueriesSchemes的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。</p>
<h2 id="出现大量的警告"><font color="cd6600">出现大量的警告</font></h2><p>Xcode7后运行以前的项目后出现大量的警告如：(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。<br>作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。</p>
<h3 id="解决方法：">解决方法：</h3><pre><code class="bash"><span class="number">1</span>、Build Settings ——&gt;Build Options——&gt;Debug Information Format
<span class="number">2</span>、Debug下的DWARF with dsYM File改成DWARF
<span class="number">3</span>、Release下的还是之前默认的DWARF with dsYM File不变
</code></pre>
<p>参考资料：</p>
<p><a href="https://github.com/ChenYilong/iOS9AdaptationTips">iOS9AdaptationTips</a> 、<a href="http://www.cocoachina.com/ios/20150821/13140.html">iOS9学习系列</a> 、<a href="https://github.com/shinobicontrols/iOS9-day-by-day">iOS9-day-by-day</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。</p>
<h2 id="信息收集"><font color="cd6600">信息收集</font></h2><p>language：zh-Hans(iOS8)  ——&gt;  zh-]]>
    </summary>
    
      <category term="iOS9" scheme="leopardpan.github.io/tags/iOS9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[单元测试]]></title>
    <link href="leopardpan.github.io/2015/09/14/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>leopardpan.github.io/2015/09/14/单元测试/</id>
    <published>2015-09-14T15:30:42.000Z</published>
    <updated>2015-09-24T13:56:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="XCTest"><a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html">XCTest</a></h2><h2 id="简介：">简介：</h2><p>内嵌到Xcode的测试框架，从Xcode5开始XCTest一直跟随着Xcode。iOS9 UI Testing更为强大，增加了UI调试,使用方法看<a href="http://leopardpan.github.io/2015/09/22/iOS9">iOS9</a>UI Testing</p>
<h3 id="使用：">使用：</h3><p>每一个名字中以“test”开始的方法被标识用来测试，并且将会评估函数中的所有断言来决定是否通过或者失败，想测试什么直接编写就行了，Command + U 所有的测试都将被执行一遍。测试失败将会被红色警告断住，成功为绿色。</p>
<h3 id="功能：">功能：</h3><p>测试和UI是完全分开的，测试只能被执行一遍。使用XCTest Crash后，可以直接跟踪显示Crash的原因（我之前写过demo是这样）</p>
<h2 id="GHUnit"><a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html">GHUnit</a></h2><h3 id="简介：-1">简介：</h3><p>Github上一个开源的测试框架，由两个作者开发和维护，貌似已经停止维护了（大多数是2年前更新的，只有两个文件是7个月前更新的）。GHunit很多功能都是模仿XCTest的，但是有了UI，不管是测试，还是观测日志都很方便。</p>
<h3 id="使用：-1">使用：</h3><p>需要新建Target，然后再main.m里把app delegate给修改成 GHUnitIOSAppDelegate，然后修改 Build Settings-Other Linker Flags，添加-ObjC 、-all_load，把原来的AppDelegate及出main.m以外的删掉，Xcode自带的TestCase一定要删除。每一个名字中以“test”开始的方法被标识用来测试，直接写测试代码就行了。</p>
<h3 id="功能：-1">功能：</h3><p>UI界面，支持重复测试，跟踪断点、捕获并显示测试细节、按照关键字查找测试案例、显示堆栈和调试信息。有多种宏输出Log到UI上，对于Analytics的网络请求及请求时长的测试，不是很方便。</p>
<h2 id="XCTool"><a href="https://code.facebook.com/projects/359440610825631/xctool/">XCTool</a></h2><h3 id="简介：-2">简介：</h3><p>XCTool是facebook在<a href="https://github.com/facebook/xctool">Github</a>开源的一个iOS编译和测试的工具，它是一个纯命令行工具，xctool替换了<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">xcodebuild</a>。使用终端cd到你的项目的根目录下，执行命令就行了。</p>
<h3 id="使用：-2">使用：</h3><p>1、<a href="https://github.com/facebook/xctool">Github</a>上有使用说明及功能介绍，建议结合我们提示使用。<br>2、brew install xctool，   如果没有安装brew可以参考<a href="http://www.cnblogs.com/leopardsnow/p/4629774.html">brew安装</a><br>3、 执行测试测试</p>
<pre><code class="bash">xctool -project demoName.xcodeproj -scheme schemeName <span class="built_in">test</span>
</code></pre>
<h3 id="功能：-2">功能：</h3><p>1、目前了解：可以测试整个项目启动时所需要执行的所有过程，有执行时间<br>2、可以把测试写入了本地，方便查看</p>
<pre><code class="bash">xctool -project demoname.xcodeproj -scheme schemeName -reporter plain:/文件路径及名字（如~/plain-output.txt）
</code></pre>
<p>3、测试单独的方法，每次都需要执行命令</p>
<pre><code>xctool -project demo.xcodeproj -scheme demo test -only <span class="constant">SomeTestTarget</span><span class="symbol">:SomeTestClass/testSomemethod</span>
</code></pre><p>4、支持各种模拟器下测试</p>
<pre><code><span class="tag">xctool</span> <span class="tag">-project</span> <span class="tag">demoName</span><span class="class">.xcodeproj</span> <span class="tag">-scheme</span> <span class="tag">schemeName</span> <span class="tag">test</span> <span class="tag">-test-sdk</span> <span class="tag">iphonesimulator8</span><span class="class">.1</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="XCTest"><a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapt]]>
    </summary>
    
      <category term="Test" scheme="leopardpan.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在OC和Swift中使用IBDesignable/IBInspectable]]></title>
    <link href="leopardpan.github.io/2015/09/03/%E5%9C%A8OC%E5%92%8CSwift%E4%B8%AD%E4%BD%BF%E7%94%A8IBDesignable-IBInspectable/"/>
    <id>leopardpan.github.io/2015/09/03/在OC和Swift中使用IBDesignable-IBInspectable/</id>
    <published>2015-09-03T05:33:45.000Z</published>
    <updated>2015-09-23T15:18:55.000Z</updated>
    <content type="html"><![CDATA[<p>iOS8新特性IBDesignable/IBInspectable，可以直接在XIB或者Storyboard中直接，设置UI类的属性。<br>例如：UIView.layer.borderWidth、borderColor、cornerRadius这些属性在XIB上是不能直接设置的，但是IBDesignable/IBInspectable，利用运行时机制，就可以把这些属性映射到XIB上了，同时我们UI类的自定义属性也可以映射上去。关于过多的解释我就不多说了可以看看<a href="http://nshipster.cn/ibinspectable-ibdesignable/">Nate Cook</a>撰写的。</p>
<h2 id="以UIView的子类为例：">以UIView的子类为例：</h2><h2 id="Swift_IBDesignable/IBInspectable">Swift IBDesignable/IBInspectable</h2><p>首先我们得建一个ViewSwift类，View继承自UIView，选择Swift语言。</p>
<pre><code class="bash">@IBDesignable
class View: UIView {    
    @IBInspectable var cornerRadius: CGFloat = <span class="number">0.0</span> {
        didSet {
            layer.cornerRadius = cornerRadius
            layer.masksToBounds = <span class="literal">true</span>
        }
    }

    @IBInspectable var borderColor: UIColor = <span class="function"><span class="title">UIColor</span></span>() {
        didSet {
            layer.borderColor = borderColor.CGColor
        }
    }

    @IBInspectable var borderWidth: CGFloat = <span class="number">0.0</span> {
        didSet {
            layer.borderWidth = borderWidth
        }
    }
}
</code></pre>
<p>然后在XIB或Storyboard里面，拖一个UIView上去，把class改成自己定义的View<br><img src="https://bytebucket.org/leopardpan/images/raw/85140d959a75e5da1d8a0d28a0bd27bcce5ae322/1.png?token=b7a45ac5634659cf6ad6530cae0cc9ed70308882" alt=""><br>然后点击旁边的属性编辑，就可以看到我们动态加载上去的属性，直接修改就可以了，XIB上的View也会跟随变化。<br><img src="https://bytebucket.org/leopardpan/images/raw/85140d959a75e5da1d8a0d28a0bd27bcce5ae322/2.png?token=11f901163034988c2daa43dc4d7e113aa3560d71" alt=""><br>我们就可以看到一个UIView的子类变成了这样<br><img src="https://bytebucket.org/leopardpan/images/raw/45e0f5f1e5a313286ab81957b55715755f1d5732/3.png?token=8aa7a81d49b217c954a91824cd670ebc3ba6c877" alt=""></p>
<h2 id="Objective-C_IBDesignable/IBInspectable">Objective-C IBDesignable/IBInspectable</h2><p>建一个ViewOC类，ViewOC继承自UIView，选择Objective-C语言，在.h里面声明属性</p>
<pre><code class="bash">@property (nonatomic, assign)IBInspectable CGFloat cornerRadius;
@property (nonatomic, assign)IBInspectable CGFloat bwidth;
@property (nonatomic, assign)IBInspectable UIColor *bcolor;
</code></pre>
<p>注意：IBInspectable修饰的位置。</p>
<p>然后再.m文件里面，@implementation前面用IB_DESIGNABLE修饰。</p>
<pre><code class="bash">IB_DESIGNABLE
@implementation ViewOC
</code></pre>
<p>然后再set方法里面去赋值就OK了，如下：</p>
<pre><code class="bash">- (void)<span class="built_in">set</span>CornerRadius:(CGFloat)cornerRadius{
    _cornerRadius = cornerRadius;
    self.layer.cornerRadius  = _cornerRadius;
    self.layer.masksToBounds = YES;
}

- (void)<span class="built_in">set</span>Bcolor:(UIColor *)bcolor{
    _bcolor = bcolor;
    self.layer.borderColor = _bcolor.CGColor;
}

- (void)<span class="built_in">set</span>Bwidth:(CGFloat)bwidth {
    _bwidth = bwidth;
    self.layer.borderWidth = _bwidth;
}
</code></pre>
<p>效果跟上面Swift是一样的，如果有疑问和建议，欢迎指导和提问。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS8新特性IBDesignable/IBInspectable，可以直接在XIB或者Storyboard中直接，设置UI类的属性。<br>例如：UIView.layer.borderWidth、borderColor、cornerRadius这些属性在XIB上是不能直接]]>
    </summary>
    
      <category term="iOS8" scheme="leopardpan.github.io/tags/iOS8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HEXO]]></title>
    <link href="leopardpan.github.io/2015/08/12/hexo/"/>
    <id>leopardpan.github.io/2015/08/12/hexo/</id>
    <published>2015-08-12T13:06:23.000Z</published>
    <updated>2015-09-23T15:26:36.000Z</updated>
    <content type="html"><![CDATA[<p>经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。</p>
<h2 id="正文：">正文：</h2><p>这边教程是针对与Mac的，<a href="http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>
<p>之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>
<h2 id="配置环境">配置环境</h2><h3 id="安装Node（必须）">安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href="https://nodejs.org/">官网</a>下载相应平台的最新版本，一路安装即可。</p>
<h3 id="安装Git（必须）">安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>
<h3 id="申请GitHub（必须）">申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href="https://github.com/">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>
<h3 id="正式安装HEXO">正式安装HEXO</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>
<pre><code class="bash">sudo npm install -g hexo
</code></pre>
<h3 id="初始化">初始化</h3><p>然后，执行init命令初始化hexo到你指定的目录，我是直接cd到目标目录执行hexo init的。命令：</p>
<pre><code class="bash">hexo init blog
</code></pre>
<p>好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。</p>
<h3 id="生成静态页面">生成静态页面</h3><p>cd 到你的init目录，执行如下命令，生成静态页面至hexo\public\目录。</p>
<pre><code class="bash">hexo generate （hexo g  也可以）
</code></pre>
<h3 id="本地启动">本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>
<pre><code class="bash">hexo server
</code></pre>
<p>浏览器输入<a href="就可以看到最原始的效果了">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>
<p>我把我报的一些错，和解决方式列出来：</p>
<h2 id="一">一</h2><pre><code class="bash">ERROR Plugin load failed: hexo-server
</code></pre>
<p>原因：</p>
<pre><code class="bash">Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.
</code></pre>
<h3 id="解决方法，执行命令：">解决方法，执行命令：</h3><pre><code class="bash">sudo npm install hexo-server
</code></pre>
<h2 id="二">二</h2><p>执行命令hexo server，有如下提示：<br>Usage: hexo<Command><br>….<br>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：</p>
<pre><code class="bash">npm install hexo-server --save
</code></pre>
<p>提示：hexo-server@0.1.2 node_modules/hexo-server<br>….<br>表示成功了<a href="https://hexo.io/zh-cn/docs/server.html">参考</a></p>
<p>这个时候再执行：</p>
<pre><code class="bash">hexo-server
</code></pre>
<p>得到:</p>
<pre><code class="bash">INFO  Hexo is running at http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span>/. Press Ctrl+C to stop.
</code></pre>
<p>这个时候再点击<a href="http://0.0.0.0:4000">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因：<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>
<pre><code class="bash">npm install hexo-renderer-ejs --save
</code></pre>
<pre><code class="bash">npm install hexo-renderer-stylus --save
</code></pre>
<pre><code class="bash">npm install hexo-renderer-marked --save
</code></pre>
<p>这个时候再重新生成静态文件，命令：</p>
<pre><code class="bash">hexo generate （或hexo g）
</code></pre>
<p>启动本地服务器：</p>
<pre><code class="bash">hexo server （或hexo s）
</code></pre>
<p>再，点击网址<a href="http://0.0.0.0:4000">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，😄，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href="https://disqus.com/home/discussion/bsspirit/hexogithubweb/">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>
<h2 id="配置Github">配置Github</h2><h3 id="建立Repository">建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>
<pre><code class="bash">_config.yml    node_modules    public        <span class="built_in">source</span>
db.json        package.json    scaffolds    themes
</code></pre>
<p>现在我们需要_config.yml文件，来建立关联，命令：</p>
<pre><code class="bash">vim _config.yml
</code></pre>
<p>翻到最下面，改成我这样子的</p>
<pre><code class="bash">deploy:
  <span class="built_in">type</span>: git
  repository: https://github.com/leopardpan/leopardpan.github.io.git
  branch: master
</code></pre>
<p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>
<pre><code class="bash">hexo deploy
</code></pre>
<p>然后再浏览器中输入<a href="http://leopardpan.github.io/">http://leopardpan.github.io/</a>就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了</p>
<h3 id="部署步骤">部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>
<pre><code class="bash">hexo clean
hexo generate
hexo deploy
</code></pre>
<p>一些常用命令：</p>
<pre><code class="bash">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span>
hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span>
hexo generate <span class="comment">#生成静态页面至public目录</span>
hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span>
hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span>
hexo version  <span class="comment">#查看Hexo的版本</span>
</code></pre>
<p>这里有大量的<a href="https://github.com/hexojs/hexo/wiki/Themes">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，😄<br><a href="https://github.com/daisygao/hexo-themes-cover">Cover</a> - A chic theme with facebook-like cover photo<br><a href="https://github.com/henryhuang/oishi">Oishi</a> - A white theme based on Landscape plus and Writing.<br><a href="https://github.com/hardywu/hexo-theme-sidebar">Sidebar</a> - Another theme based on Light with a simple sidebar<br><a href="https://github.com/SuperKieran/TKL">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br><a href="https://github.com/levonlin/Tinnypp">Tinnypp</a> - A clean, simple theme based on Tinny<br><a href="https://github.com/yunlzheng/hexo-themes-writing">Writing</a> - A small and simple hexo theme based on Light<br><a href="https://github.com/litten/hexo-theme-yilia">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br><a href="https://github.com/Voidly/pacman">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow</p>
<h2 id="一些基本路径">一些基本路径</h2><p>文章在source/_posts，如果你不怕麻烦的话可以跟我一样直接用vim去编辑，支持markdown语法，你有好的编辑软件，给我也推荐下，感激不尽😄。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里，修改名字在public/index.html里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>
<h3 id="修改头像，我当前的路径/Users/leopard/blog/themes/yilia，ls_你可以看到">修改头像，我当前的路径/Users/leopard/blog/themes/yilia，ls 你可以看到</h3><pre><code class="bash">Gruntfile.js    _config.yml    package.json
README.md    layout        <span class="built_in">source</span>
</code></pre>
<p>vim _config.yml 进去，找到 #你的头像url avatar:  后接一个URL就行了，头像就修改成功了</p>
<h3 id="修改主题和作者名字，我当前的路径/Users/leopard/blog，ls_你可以看到">修改主题和作者名字，我当前的路径/Users/leopard/blog，ls 你可以看到</h3><pre><code class="bash">_config.yml    node_modules    public        <span class="built_in">source</span>        themes
db.json        package.json    scaffolds    ssh-keygen
</code></pre>
<p>vim _config.yml 进去，找到 author: 潘柏信，修改成你自己的名字就行了<br>修改主题，然后继续往下找到</p>
<pre><code class="bash"><span class="comment"># Extensions</span>
<span class="comment">## Plugins: http://hexo.io/plugins/</span>
<span class="comment">## Themes: http://hexo.io/themes/</span>
theme: yilia
</code></pre>
<p>改成theme: yilia，theme:后面接你自己的主题名字就行了,然后分别执行</p>
<pre><code class="bash">部署 hexo g
提交 hexo d
</code></pre>
<p>你的主题，和名字就修改成功了</p>
<h2 id="Markdown语法参考链接">Markdown语法参考链接</h2><p><a href="http://www.jianshu.com/p/1e402922ee32/">链接一</a>（来自简书）<br><a href="http://www.cnblogs.com/hnrainll/p/3514637.html">链接二</a>（来自博客园）<br><a href="http://www.bluesdream.com/blog/markdown-cheatsheet-syntax-manual.html">链接三</a>（个人博客）<br><a href="http://ibruce.info/2013/11/26/markdown/">链接四</a>（不如的个人博客）</p>
<p>转载请注明原地址，潘柏信的博客：<a href="http://leopardpan.github.io">http://leopardpan.github.io</a> 谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。</p>
<h2 id="正文：">正文：</h2><p>这边教程是针对与Mac的，<a href]]>
    </summary>
    
      <category term="博客" scheme="leopardpan.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>